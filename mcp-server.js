// mcp-server.js
// –°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ MCP —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è TradeHub (–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)

const http = require('http');
const WebSocket = require('ws');
const fs = require('fs');
const path = require('path');
const { spawnSync } = require('child_process');

// –í–µ—Ä—Å–∏—è MCP —Å–µ—Ä–≤–µ—Ä–∞
const MCP_VERSION = '1.0.1';
const PORT = 3025;
const HOST = 'localhost';

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–∞–∫–µ—Ç–æ–≤
const checkDependencies = () => {
  try {
    require.resolve('ws');
    console.log('‚úì WebSocket –º–æ–¥—É–ª—å –Ω–∞–π–¥–µ–Ω');
    return true;
  } catch (err) {
    console.log('‚úó –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –º–æ–¥—É–ª—å ws');
    console.log('–£—Å—Ç–∞–Ω–æ–≤–∫–∞ ws...');
    
    const installProcess = spawnSync('npm', ['install', 'ws', '--save'], { 
      stdio: 'inherit',
      shell: true 
    });
    
    if (installProcess.status !== 0) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ ws');
      return false;
    }
    
    console.log('‚úì –ú–æ–¥—É–ª—å ws —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    return true;
  }
};

// –ó–∞–ø—É—Å–∫ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ MCP —Å–µ—Ä–≤–µ—Ä–∞
const startMcpServer = async () => {
  console.log(`–ó–∞–ø—É—Å–∫ TradeHub MCP —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}...`);
  
  // –°–æ–∑–¥–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä
  const server = http.createServer((req, res) => {
    res.setHeader('Access-Control-Allow-Origin', '*');
    res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS');
    res.setHeader('Access-Control-Allow-Headers', 'Content-Type');
    
    if (req.method === 'OPTIONS') {
      res.writeHead(204);
      res.end();
      return;
    }
    
    if (req.url === '/health') {
      res.writeHead(200, { 'Content-Type': 'application/json' });
      res.end(JSON.stringify({ 
        status: 'ok',
        version: MCP_VERSION,
        timestamp: new Date().toISOString()
      }));
      return;
    }
    
    res.writeHead(404, { 'Content-Type': 'application/json' });
    res.end(JSON.stringify({ error: 'Not found' }));
  });
  
  // –°–æ–∑–¥–∞–µ–º WebSocket —Å–µ—Ä–≤–µ—Ä
  const wss = new WebSocket.Server({ server });
  
  // –ö–æ–ª–ª–µ–∫—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
  const clients = new Set();
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
  wss.on('connection', (ws, req) => {
    const clientIp = req.socket.remoteAddress;
    console.log(`üë§ –ö–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω: ${clientIp}`);
    clients.add(ws);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    ws.send(JSON.stringify({
      type: 'system',
      message: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ TradeHub MCP Server',
      version: MCP_VERSION,
      timestamp: new Date().toISOString()
    }));
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
    ws.on('message', (message) => {
      try {
        const data = JSON.parse(message);
        console.log(`üì• –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: —Ç–∏–ø=${data.type || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}, ${data.name || ''}`);
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
        if (data.type === 'event') {
          // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π
          const timestamp = new Date().toISOString();
          const logEntry = `[${timestamp}] EVENT: ${data.name} - ${JSON.stringify(data.data)}`;
          console.log(logEntry);
          
          // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –≤ –ª–æ–≥-—Ñ–∞–π–ª
          fs.appendFile('mcp-events.log', logEntry + '\n', (err) => {
            if (err) console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥-—Ñ–∞–π–ª:', err);
          });
        } else if (data.type === 'error') {
          // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫
          const timestamp = new Date().toISOString();
          const logEntry = `[${timestamp}] ERROR: ${data.message} - ${data.stack || 'No stack trace'}`;
          console.error(logEntry);
          
          // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—à–∏–±–æ–∫ –≤ –ª–æ–≥-—Ñ–∞–π–ª
          fs.appendFile('mcp-errors.log', logEntry + '\n', (err) => {
            if (err) console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥-—Ñ–∞–π–ª:', err);
          });
          
          console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞: ${data.message}`);
        }
      } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', err);
      }
    });
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    ws.on('close', () => {
      console.log(`üëã –ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω: ${clientIp}`);
      clients.delete(ws);
    });
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    ws.on('error', (err) => {
      console.error(`–û—à–∏–±–∫–∞ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å ${clientIp}:`, err);
      clients.delete(ws);
    });
  });
  
  // –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
  server.listen(PORT, HOST, () => {
    console.log(`üöÄ MCP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://${HOST}:${PORT}`);
    console.log(`üìä WebSocket —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ ws://${HOST}:${PORT}`);
    
    // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–∏–Ω–≥-—Å–æ–æ–±—â–µ–Ω–∏–π –∫–ª–∏–µ–Ω—Ç–∞–º
    setInterval(() => {
      const timestamp = new Date().toISOString();
      
      if (clients.size > 0) {
        console.log(`üì° –û—Ç–ø—Ä–∞–≤–∫–∞ ping: ${timestamp} (–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤: ${clients.size})`);
        
        clients.forEach((client) => {
          if (client.readyState === WebSocket.OPEN) {
            client.send(JSON.stringify({
              type: 'ping',
              timestamp
            }));
          }
        });
      }
    }, 30000); // –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
  });
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å–µ—Ä–≤–µ—Ä–∞
  server.on('error', (err) => {
    console.error('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', err);
    process.exit(1);
  });
  
  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ Cursor
  updateCursorConfig();
};

// –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Cursor
const updateCursorConfig = () => {
  const mcpConfigPath = path.join(process.env.USERPROFILE || process.env.HOME, '.cursor', 'mcp.json');
  const mcpConfigDir = path.dirname(mcpConfigPath);
  
  if (!fs.existsSync(mcpConfigDir)) {
    try {
      fs.mkdirSync(mcpConfigDir, { recursive: true });
      console.log(`‚úì –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: ${mcpConfigDir}`);
    } catch (err) {
      console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ ${mcpConfigDir}:`, err);
      return;
    }
  }
  
  const mcpConfig = {
    mcpServers: {
      'browser-tools': {
        command: 'node mcp-server.js',
        browserToolsConfig: {
          serverHost: HOST,
          serverPort: PORT,
          disableDiscovery: true
        }
      }
    }
  };
  
  try {
    fs.writeFileSync(mcpConfigPath, JSON.stringify(mcpConfig, null, 2));
    console.log(`‚úì –û–±–Ω–æ–≤–ª–µ–Ω –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª Cursor: ${mcpConfigPath}`);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ Cursor:', err);
  }
};

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
process.on('SIGINT', () => {
  console.log('\n–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã MCP —Å–µ—Ä–≤–µ—Ä–∞...');
  process.exit(0);
});

process.on('SIGTERM', () => {
  console.log('\n–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã MCP —Å–µ—Ä–≤–µ—Ä–∞...');
  process.exit(0);
});

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
const main = async () => {
  console.log('=== TradeHub MCP Server ===');
  console.log(`–í–µ—Ä—Å–∏—è: ${MCP_VERSION}`);
  console.log('===========================');
  
  if (!checkDependencies()) {
    console.error('–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏');
    process.exit(1);
  }
  
  try {
    await startMcpServer();
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ MCP —Å–µ—Ä–≤–µ—Ä–∞:', err);
    process.exit(1);
  }
};

// –°—Ç–∞—Ä—Ç –ø—Ä–æ–≥—Ä–∞–º–º—ã
main();